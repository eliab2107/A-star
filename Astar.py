def varre_grafo(options):
    resp = options[0]
    for i in options:
        if i < resp:
            resp = i
    return resp


def add_in_heap(numero):

    ...


def delete_in_heap():
    ...


graph = {'E1': ['E2'],
         'E2': ['E1', 'E3', 'E10', 'E9'],
         'E3': ['E2', 'E4', 'E9', 'E13'],
         'E4': ['E3', 'E5', 'E13', 'E8'],
         'E5': ['E4', 'E6', 'E7', 'E8'],
         'E6': ['E5'],
         'E7': ['E5'],
         'E8': ['E4', 'E5', 'E9', 'E12'],
         'E9': ['E2', 'E3', 'E8', 'E11'],
         'E10': ['E2'],
         'E11': ['E9'],
         'E12': ['E8'],
         'E13': ['E3', 'E4', 'E14'],
         'E14': ['E13']
}

matrix_distancias = [
    [-1, 10, 18.5, 24.8, 36.4, 38.8, 35.8, 25.4, 17.6, 9.1, 16.7, 27.3, 27.6, 29.8],
    [-1, -1, 8.5, 14.8, 26.6, 29.1, 26.1, 17.3, 10, 3.5, 15.5, 20.9, 19.1, 21.8],
    [-1, -1, -1, 6.3, 18.2, 20.6, 17.6, 13.6, 9.4, 10.3, 19.5, 19.1, 12.1, 16.6],
    [-1, -1, -1, -1, 12, 14.4, 11.5, 12.4, 12.6, 16.7, 23.6, 18.6, 10.6, 15.4],
    [-1, -1, -1, -1, -1, 3, 2.4, 19.4, 23.3, 28.2, 34.2, 24.8, 14.5, 17.9],
    [-1, -1, -1, -1, -1, -1, 3.3, 22.3, 25.7, 30.3, 36.7, 27.6, 15.2, 18.2],
    [-1, -1, -1, -1, -1, -1, -1, 20, 23, 27.3, 34.2, 25.7, 12.4, 15.6],
    [-1, -1, -1, -1, -1, -1, -1, -1, 8.2, 20.3, 16.1, 6.4, 22.7, 27.6],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, 13.5, 11.2, 10.9, 21.2, 26.6],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17.6, 24.2, 18.7, 21.2],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14.2, 31.5, 35.5],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 28.8, 33.6],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5.1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
]


matrix_distancias_real = [
    [-1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, 8.5, -1, -1, -1, -1, -1, 10, 3.5, -1, -1, -1, -1],
    [-1, -1, -1, 6.3, -1, -1, -1, -1, 9.4, -1, -1, -1, 18.7, -1],
    [-1, -1, -1, -1, 13, -1, -1, 15.3, -1, -1, -1, -1, 12.8, -1],
    [-1, -1, -1, -1, -1, 3, 2.4, 30, -1, -1, -1, -1, -1, -1],
    [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
    [-1, -1, -1, -1, -1, -1, -1, -1, 9.6, -1, -1, 6.4, -1,-1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12.2, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1,-1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,-1,-1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5.1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
]

initial = str(input())
destiny = str(input())

inicio = int(initial[-1])
destino = int(destiny[-1])

# if atual == destiny:
#     print(f'Encontrei o caminho mais curto entre {initial} e {destiny}')
# else:
#     add_in_heap(graph[atual])
